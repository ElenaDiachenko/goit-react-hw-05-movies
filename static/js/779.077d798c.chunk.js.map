{"version":3,"file":"static/js/779.077d798c.chunk.js","mappings":"iSAEaA,EAAYC,EAAAA,GAAAA,GAAH,iIAGb,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAKGC,EAAOJ,EAAAA,GAAAA,GAAH,iRAIR,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACG,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACK,SAAAF,GAAC,OAAIA,EAAEC,MAAMG,QAAQC,EAApB,IAIPC,EAAaP,EAAAA,GAAAA,GAAH,qFACN,SAAAC,GAAC,OAAIA,EAAEC,MAAMM,YAAYC,IAAxB,IACH,SAAAR,GAAC,OAAIA,EAAEC,MAAMQ,UAAUC,CAAtB,IACC,SAAAV,GAAC,OAAIA,EAAEC,MAAMU,YAAYC,OAAxB,IAGLC,EAAUd,EAAAA,GAAAA,EAAH,qFACH,SAAAC,GAAC,OAAIA,EAAEC,MAAMM,YAAYO,MAAxB,IACH,SAAAd,GAAC,OAAIA,EAAEC,MAAMQ,UAAUM,CAAtB,IACC,SAAAf,GAAC,OAAIA,EAAEC,MAAMU,YAAYK,IAAxB,I,mBC6BlB,EAlDgB,WACd,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,QAArC,eAAOG,EAAP,KAAeC,EAAf,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WACR,IACED,EAAU,WACV,mCAAC,qGACoBE,EAAAA,EAAAA,IAAaR,GADjC,UAEqB,KADdS,EADP,QAEUC,OAFV,uBAGGJ,EAAU,YACVK,EAAAA,GAAAA,KAAW,gCAJd,0BAOCL,EAAU,YACVF,EAAWK,GARZ,2CAAD,sDAaD,CAHC,MAAOG,GACPN,EAAU,YACVO,QAAQC,IAAIF,EAAMG,QACnB,CACF,GAAE,CAACf,KAGF,gCACc,YAAXK,IAAwB,SAACW,EAAA,EAAD,IACb,aAAXX,GAAyB,KACd,aAAXA,IACC,SAACxB,EAAD,UACGsB,EAAQc,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1B,OACE,UAAClC,EAAD,YACE,SAACG,EAAD,UAAa8B,KACb,SAACvB,EAAD,UAAUwB,MAFDF,EAKd,QAKV,C,2MChDDG,IAAAA,SAAAA,QAAA,gCAEA,IAAMC,EAAU,mCAEHC,EAAmB,mCAAG,oGACVF,IAAAA,IAAA,qCAAwCC,IAD9B,cAC3BE,EAD2B,yBAE1BA,EAASf,KAAKgB,SAFY,2CAAH,qDAKnBC,EAAoB,mCAAG,WAAOC,EAAOC,GAAd,uFACXP,IAAAA,IAAA,+BACGC,EADH,kBACoBK,EADpB,gCACiDC,EADjD,yBADW,cAC5BJ,EAD4B,yBAI3BA,EAASf,MAJkB,2CAAH,wDAOpBoB,EAAc,mCAAG,WAAM7B,GAAN,uFACLqB,IAAAA,IAAA,gBACZrB,EADY,oBACOsB,EADP,oBADK,cACtBE,EADsB,yBAIrBA,EAASf,MAJY,2CAAH,sDAQdqB,EAAS,mCAAG,WAAM9B,GAAN,uFACAqB,IAAAA,IAAA,gBACZrB,EADY,4BACesB,EADf,oBADA,cACjBE,EADiB,yBAIhBA,EAASf,KAAKsB,MAJE,2CAAH,sDAOTvB,EAAY,mCAAG,WAAMR,GAAN,uFACHqB,IAAAA,IAAA,gBACZrB,EADY,4BACesB,EADf,oBADG,cACpBE,EADoB,yBAInBA,EAASf,KAAKgB,SAJK,2CAAH,qD","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/API.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: ${p => p.theme.space[4]}px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const Item = styled.li`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: ${p => p.theme.space[4]}px;\n  padding: ${p => p.theme.space[4]}px;\n  border-radius: ${p => p.theme.borders.sm};\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\nexport const AuthorName = styled.h2`\n  font-weight: ${p => p.theme.fontWeights.bold};\n  font-size: ${p => p.theme.fontSizes.m};\n  line-height: ${p => p.theme.lineHeights.heading};\n`;\n\nexport const Content = styled.p`\n  font-weight: ${p => p.theme.fontWeights.normal};\n  font-size: ${p => p.theme.fontSizes.s};\n  line-height: ${p => p.theme.lineHeights.body};\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport { fetchReviews } from 'services/API';\nimport { Container, Item, AuthorName, Content } from './Reviews.styled';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [status, setStatus] = useState('idle');\n\n  useEffect(() => {\n    try {\n      setStatus('pending');\n      (async function getReviews() {\n        const data = await fetchReviews(movieId);\n        if (data.length === 0) {\n          setStatus('rejected');\n          toast.info('Sorry, there are no cast yet');\n          return;\n        }\n        setStatus('resolved');\n        setReviews(data);\n      })();\n    } catch (error) {\n      setStatus('rejected');\n      console.log(error.message);\n    }\n  }, [movieId]);\n\n  return (\n    <>\n      {status === 'pending' && <Loader />}\n      {status === 'rejected' && null}\n      {status === 'resolved' && (\n        <Container>\n          {reviews.map(({ id, author, content }) => {\n            return (\n              <Item key={id}>\n                <AuthorName>{author}</AuthorName>\n                <Content>{content}</Content>\n              </Item>\n            );\n          })}\n        </Container>\n      )}\n    </>\n  );\n};\n\nReviews.propTypes = {\n  author: PropTypes.string,\n  content: PropTypes.string,\n  id: PropTypes.number,\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3/`;\n\nconst API_KEY = 'a5f5962e6f7f3d792e77e5ce1e0a6398';\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\nexport const fetchMoviesByKeyword = async (query, page) => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=${page}&include_adult=false`\n  );\n  return response.data;\n};\n\nexport const fetchMovieById = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\n// api.themoviedb.org/3/movie/{movie_id}/credits?api_key=<<api_key>>&language=en-US\nexport const fetchCast = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const fetchReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.results;\n};\n"],"names":["Container","styled","p","theme","space","Item","borders","sm","AuthorName","fontWeights","bold","fontSizes","m","lineHeights","heading","Content","normal","s","body","movieId","useParams","useState","reviews","setReviews","status","setStatus","useEffect","fetchReviews","data","length","toast","error","console","log","message","Loader","map","id","author","content","axios","API_KEY","fetchTrendingMovies","response","results","fetchMoviesByKeyword","query","page","fetchMovieById","fetchCast","cast"],"sourceRoot":""}